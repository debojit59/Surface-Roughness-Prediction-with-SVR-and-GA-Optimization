# -*- coding: utf-8 -*-
"""Surface Roughness.2023.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1Y3YYj5h5cC7QzaUxzqkeTJJKp8I3vS-r
"""

pip install geneticalgorithm

#import Library
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
from sklearn.metrics import r2_score, mean_squared_error
from sklearn.model_selection import train_test_split
from sklearn.svm import SVR
from geneticalgorithm import geneticalgorithm as ga

# Load the dataset (replace 'your_dataset.csv' with the actual file name)
dataset = pd.read_csv(r'/content/surface roughness.csv')

dataset.head()

# Extracting features (X) and target variable (y)
X = dataset.iloc[:, 0:-1].values
y = dataset.iloc[:, -1].values

y=y.reshape(len(y),-1)
y

# Split the dataset into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=.2, random_state=101)

X_train

X_test

y_train

y_test

# SVR model training
regressor = SVR(kernel='rbf')
regressor.fit(X_train, y_train.ravel())

# SVR prediction on test set
pred_y = regressor.predict(X_test).reshape(-1, 1)

pred_y

# Evaluate SVR model
r2_accuracy = r2_score(y_test, pred_y)
print("SVR R2 Accuracy:", r2_accuracy)

# Genetic Algorithm for SVR parameter optimization
def svr_objective_function(x):
    regressor = SVR(kernel='rbf', C=x[0], epsilon=x[1], gamma=x[2])
    regressor.fit(X_train, y_train.ravel())
    y_pred = regressor.predict(X_test).reshape(-1, 1)
    return mean_squared_error(y_test, y_pred)

# Define parameter ranges for genetic algorithm
C_range = [1, 100]
epsilon_range = [0.01, 0.1]
gamma_range = [0.01, 0.1]
varbound = np.array([C_range, epsilon_range, gamma_range])
vartype = np.array([['real'], ['real'], ['real']])

# Define genetic algorithm parameters
algorithm_params = {'max_num_iteration': 100,
                    'population_size': 50,
                    'mutation_probability': 0.5,
                    'elit_ratio': 0.1,
                    'crossover_probability': 0.05,
                    'parents_portion': 0.5,
                    'crossover_type': 'uniform',
                    'max_iteration_without_improv': 1}

#Run genetic algorithm
model = ga(function=svr_objective_function, dimension=3, variable_type_mixed=vartype,
           variable_boundaries=varbound, algorithm_parameters=algorithm_params)
model.run()

# Get optimized SVR parameters
optimized_params = model.output_dict['variable'].tolist()
print("\nOptimized SVR Parameters:", optimized_params)

pred_y_optimized = regressor_optimized.predict(X_test).reshape(-1, 1)

pred_y_optimized

r2_accuracy = r2_score(y_test,pred_y_optimized)
print("SVR R2 Accuracy:", r2_accuracy)

# Plot SVR predictions with original and optimized parameters
fig, ax = plt.subplots(figsize=(8.5, 5.5))
plt.plot(np.array([i for i in range(1, len(y)+1)]), y, ".-", color='red', label='Experiment Values')
plt.plot(np.array([i for i in range(1, len(y)+1)]), regressor.predict(X).reshape(-1, 1), ".-", color='blue',
         label='Prediction with Original Parameters')
regressor_optimized = SVR(kernel='rbf', C=optimized_params[0], epsilon=optimized_params[1], gamma=optimized_params[2])
regressor_optimized.fit(X_train, y_train.ravel())
plt.plot(np.array([i for i in range(1, len(y)+1)]), regressor_optimized.predict(X).reshape(-1, 1), ".-", color='green',
         label='Prediction with Optimized Parameters')
plt.legend()
plt.xlabel('Experiment No')
plt.ylabel('Surface Roughness')
plt.show()

